snippet itz "Italize" iA
_$1_
endsnippet

snippet bdo "Bold" iA
*$1*
endsnippet

snippet incd "Inline code" iA
\`$1\`
endsnippet

snippet pic "import Picture"
{{file:/mnt/Nemo/Documents/vimwiki/pic/$0}}
endsnippet

snippet gph "import Graph"
{{file:/mnt/Nemo/Documents/vimwiki/graph/$0}}
endsnippet

snippet mmc "Multiline code" iA
{{{class="language-${1:cpp}"
$0
}}}
endsnippet

# Latex snippet
snippet mk "latex" iA
\$$1\$$0
endsnippet

snippet mml "multiline latex" iA
{{\$%align%
$1
}}\$$0
endsnippet

snippet begg "begin & end" iA
\\begin{$1} $2 \\end{$1}$0
endsnippet

snippet brk "bracket" iA
\\big$1 $3 \\big$2$0
endsnippet

snippet vt "vector" iA
\\vec{$1}$0
endsnippet

snippet mx "matrix" iA
\\begin{${1:v}matrix} $2 \end{$1matrix}$0
endsnippet

# snippet // "Fraction" iA
# \\frac{$1}{$2}$0
# endsnippet

# snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
# \\frac{`!p snip.rv = match.group(1)`}{$1}$0
# endsnippet

# priority 1000
# snippet '^.*\)/' "() Fraction" wrA
# `!p
# stripped = match.string[:-1]
# depth = 0
# i = len(stripped) - 1
# while True:
# 	if stripped[i] == ')': depth += 1
# 	if stripped[i] == '(': depth -= 1
# 	if depth == 0: break;
# 	i -= 1
# snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
# `{$1}$0
# endsnippet

snippet '((\d+)|(\d*)(\\))C' "combination" wrA
{}^{`!p snip.rv = match.group(1)`}C_{$1}$0
endsnippet

snippet '((\d+)|(\d*)(\\))P' "permutation" wrA
{}^{`!p snip.rv = match.group(1)`}P_{$1}$0
endsnippet

snippet sqrt "square root" iA
\\sqrt[$1]{$2}$0
endsnippet

snippet tsum "sum" iA
\\sum_{${1:i=1}}^{${2:N}}$0
endsnippet

snippet lmt "limit" iA
\\lim_{${1:x}\to ${2:\\infty}}{${3:f(x)}}$0
endsnippet

snippet drv "derivative" iA
\\frac{\mathrm{d}$1}{\mathrm{d}${2:x}}$0
endsnippet

snippet igl "integral" iA
\\int{${1:x-1}} \\mathrm{d}${2:x}$0
endsnippet

snippet igd "integral" iA
\\int_{${1:-\\infty}}^{${2:\\infty}}{${3:x-1}} \\mathrm{d}${4:x}$0
endsnippet

snippet sininv "sin^-1" iA
\\sin^{-1}$0
endsnippet

snippet cosinv "cos^-1" iA
\\cos^{-1}$0
endsnippet

snippet taninv "tan^-1" iA
\\tan^{-1}$0
endsnippet

snippet secinv "sec^-1" iA
\\sec^{-1}$0
endsnippet

snippet cotinv "cot^-1" iA
\\cot^{-1}$0
endsnippet

snippet cscinv "csc^-1" iA
\\csc^{-1}$0
endsnippet
